// Mocks generated by Mockito 5.4.6 from annotations
// in test_gcode/test/gcode_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;
import 'package:test_gcode/core/services/gcode_service.dart' as _i2;
import 'package:test_gcode/domain/entities/gcode_version.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [GCodeService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGCodeService extends _i1.Mock implements _i2.GCodeService {
  MockGCodeService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<int> getFileSize(String? filename) => (super.noSuchMethod(
        Invocation.method(
          #getFileSize,
          [filename],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<String> getReferenceGCode(String? controllerId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getReferenceGCode,
          [controllerId],
        ),
        returnValue: _i3.Future<String>.value(_i4.dummyValue<String>(
          this,
          Invocation.method(
            #getReferenceGCode,
            [controllerId],
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<String> getModifiedGCode(String? controllerId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getModifiedGCode,
          [controllerId],
        ),
        returnValue: _i3.Future<String>.value(_i4.dummyValue<String>(
          this,
          Invocation.method(
            #getModifiedGCode,
            [controllerId],
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Stream<String> getReferenceGCodeChunked(String? controllerId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getReferenceGCodeChunked,
          [controllerId],
        ),
        returnValue: _i3.Stream<String>.empty(),
      ) as _i3.Stream<String>);

  @override
  _i3.Stream<String> getModifiedGCodeChunked(String? controllerId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getModifiedGCodeChunked,
          [controllerId],
        ),
        returnValue: _i3.Stream<String>.empty(),
      ) as _i3.Stream<String>);

  @override
  _i3.Future<List<_i5.GCodeVersion>> getHistoricalVersions(
          String? controllerId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getHistoricalVersions,
          [controllerId],
        ),
        returnValue:
            _i3.Future<List<_i5.GCodeVersion>>.value(<_i5.GCodeVersion>[]),
      ) as _i3.Future<List<_i5.GCodeVersion>>);

  @override
  _i3.Future<void> saveAsReference(
    String? controllerId,
    String? code,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveAsReference,
          [
            controllerId,
            code,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<String> getVersionContent(String? versionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getVersionContent,
          [versionId],
        ),
        returnValue: _i3.Future<String>.value(_i4.dummyValue<String>(
          this,
          Invocation.method(
            #getVersionContent,
            [versionId],
          ),
        )),
      ) as _i3.Future<String>);
}
